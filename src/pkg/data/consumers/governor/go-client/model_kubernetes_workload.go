/*
Catalog Governor Service REST API

This is the service to track assets deployed in customer clusters

API version: ${project.version}
Contact: content-building-ecosystem@vmware.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KubernetesWorkload Kubernetes workload deployed in a remote system
type KubernetesWorkload struct {
	// Name of the workload deployed
	Name string `json:"name"`
	// Namespace where the workload is deployed
	Namespace string `json:"namespace"`
	// Kind of the workload Resource
	Kind string `json:"kind"`
	Containers []Container `json:"containers"`
	AdditionalProperties map[string]interface{}
}

type _KubernetesWorkload KubernetesWorkload

// NewKubernetesWorkload instantiates a new KubernetesWorkload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesWorkload(name string, namespace string, kind string, containers []Container) *KubernetesWorkload {
	this := KubernetesWorkload{}
	this.Name = name
	this.Namespace = namespace
	this.Kind = kind
	this.Containers = containers
	return &this
}

// NewKubernetesWorkloadWithDefaults instantiates a new KubernetesWorkload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesWorkloadWithDefaults() *KubernetesWorkload {
	this := KubernetesWorkload{}
	return &this
}

// GetName returns the Name field value
func (o *KubernetesWorkload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KubernetesWorkload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KubernetesWorkload) SetName(v string) {
	o.Name = v
}

// GetNamespace returns the Namespace field value
func (o *KubernetesWorkload) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *KubernetesWorkload) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *KubernetesWorkload) SetNamespace(v string) {
	o.Namespace = v
}

// GetKind returns the Kind field value
func (o *KubernetesWorkload) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *KubernetesWorkload) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *KubernetesWorkload) SetKind(v string) {
	o.Kind = v
}

// GetContainers returns the Containers field value
func (o *KubernetesWorkload) GetContainers() []Container {
	if o == nil {
		var ret []Container
		return ret
	}

	return o.Containers
}

// GetContainersOk returns a tuple with the Containers field value
// and a boolean to check if the value has been set.
func (o *KubernetesWorkload) GetContainersOk() ([]Container, bool) {
	if o == nil {
		return nil, false
	}
	return o.Containers, true
}

// SetContainers sets field value
func (o *KubernetesWorkload) SetContainers(v []Container) {
	o.Containers = v
}

func (o KubernetesWorkload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["namespace"] = o.Namespace
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["containers"] = o.Containers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *KubernetesWorkload) UnmarshalJSON(bytes []byte) (err error) {
	varKubernetesWorkload := _KubernetesWorkload{}

	if err = json.Unmarshal(bytes, &varKubernetesWorkload); err == nil {
		*o = KubernetesWorkload(varKubernetesWorkload)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "kind")
		delete(additionalProperties, "containers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKubernetesWorkload struct {
	value *KubernetesWorkload
	isSet bool
}

func (v NullableKubernetesWorkload) Get() *KubernetesWorkload {
	return v.value
}

func (v *NullableKubernetesWorkload) Set(val *KubernetesWorkload) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesWorkload) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesWorkload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesWorkload(val *KubernetesWorkload) *NullableKubernetesWorkload {
	return &NullableKubernetesWorkload{value: val, isSet: true}
}

func (v NullableKubernetesWorkload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesWorkload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


